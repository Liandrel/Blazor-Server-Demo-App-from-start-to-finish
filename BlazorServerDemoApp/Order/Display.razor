@page "/Order/Display/{Id:int}"
@using BlazorServerDemoApp.Models

@inject IFoodData _foodData
@inject IOrderData _orderData

<h3>Display</h3>

@if(order is null)
{
    <h4> Record Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order Name</strong></td>
                <td>@order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@order.Total.ToString("C",CultureInfo.CreateSpecificCulture("en-US"))</td>
            </tr>
            <tr>
                <td><strong>Item Ordered</strong></td>
                <td>@itemPurchased</td>
            </tr>
            <tr>
                <td><strong>Quantity Ordered</strong></td>
                <td>@order.Quantity</td>
            </tr>
    </tbody>
    </table>

    <EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@updateModel" />

        <div class="form-group">
            <label class="control-label"> Name for the Order</label>
            <InputText @bind-Value="updateModel.OrderName" class="form-control" />
            <ValidationMessage For="@(() => updateModel.OrderName)" class="text-danger" />
        </div>
        <div class="form-group">
            <input type="submit" value="Update Order name" class=" btn btn-primary" />
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private OrderModel order;
    private string itemPurchased;
    private OrderUpdateModel updateModel = new();

    protected override async Task OnInitializedAsync()
    {
        order = await _orderData.GetOrderById(Id);

        if(order is not null)
        {
            var food = await _foodData.GetFood();

            itemPurchased = food.Where(x => x.Id == order.FoodId).FirstOrDefault()?.Title;

            updateModel.Id = order.Id;
            updateModel.OrderName = order.OrderName;
        }
    }
    private async Task HandleValidSubmitAsync()
    {
        await _orderData.UpdateOrderName(updateModel.Id, updateModel.OrderName);
        order.OrderName = updateModel.OrderName;
    }
}
