@page "/Order/Create"
@inject IFoodData _foodData
@inject IOrderData _orderData
@inject NavigationManager navigationManager

<h3>Create</h3>


<EditForm Model="@order" OnValidSubmit="HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@order" />
    <div class="form-group">
        <label class="control-label" >Item To Order</label>
        <select @onchange="FoodItemChange" class="form-control" >
            <option value="">Select a meal...</option>
            @foreach (var f in food)
            {
                        <option value="@f.Id">@f.Title</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Quantity</label>
        <InputNumber  @bind-Value="order.Quantity" class="form-control" />
        <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
    </div>
    <div class="form-group">
        <label class="control-label">Name for the order</label>
        <InputText @bind-Value="order.OrderName" class="form-control" />
        <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
    </div>
    <div class="form-group">
        <input type="submit" value="Order Food" class="btn btn-primary mt-1" />
    </div>
</EditForm>

@code {
    private OrderModel order = new();
    private List<FoodModel> food = new();



    protected override async Task OnParametersSetAsync()
    {
        food = await _foodData.GetFood();

    }
    private void FoodItemChange(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()) == false)
        {
            order.FoodId = int.Parse(e.Value.ToString());
        }
        else
        {
            order.FoodId = 0;
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        order.Total = order.Quantity * food.Where(x => x.Id == order.FoodId).First().Price;

        int id = await _orderData.CreateOrder(order);

        navigationManager.NavigateTo($"Order/Display/{id}");
    }

}
